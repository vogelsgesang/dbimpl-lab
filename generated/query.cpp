#include <unordered_map>
#include <iostream>
#include "schema/Types.hpp"
#include "schema/GeneratedSchema.hpp"
void query(table_data* tables) {std::unordered_multimap<std::tuple<Integer, Integer, Integer>, std::tuple<Varchar<16>, Varchar<16>, Numeric<1,0>>> ht_1;std::unordered_multimap<std::tuple<Integer, Integer, Integer>, std::tuple<Varchar<16>, Varchar<16>>> ht_0;for(size_t tid = 0; tid < tables->customer.col_c_id.size(); tid++) {auto& iu_c_id_2 = tables->customer.col_c_id[tid];auto& iu_c_d_id_0 = tables->customer.col_c_d_id[tid];auto& iu_c_w_id_1 = tables->customer.col_c_w_id[tid];auto& iu_c_last_11 = tables->customer.col_c_last[tid];auto& iu_c_first_10 = tables->customer.col_c_first[tid];if(iu_c_d_id_0 == 1) {if(iu_c_w_id_1 == 1) {if(iu_c_id_2 == 322) {ht_0.insert(std::make_pair(std::make_tuple(iu_c_w_id_1, iu_c_d_id_0, iu_c_id_2), std::make_tuple(iu_c_last_11, iu_c_first_10)));}}}}for(size_t tid = 0; tid < tables->order.col_o_c_id.size(); tid++) {auto& iu_o_c_id_5 = tables->order.col_o_c_id[tid];auto& iu_o_id_8 = tables->order.col_o_id[tid];auto& iu_o_w_id_3 = tables->order.col_o_w_id[tid];auto& iu_o_d_id_4 = tables->order.col_o_d_id[tid];auto& iu_o_all_local_12 = tables->order.col_o_all_local[tid];{auto range_iters = ht_0.equal_range(std::make_tuple(iu_o_w_id_3, iu_o_d_id_4, iu_o_c_id_5));auto iter = range_iters.first;auto limit = range_iters.second;for(;iter != limit; iter++) {auto& iu_c_last_11 = std::get<0>(iter->second);auto& iu_c_first_10 = std::get<1>(iter->second);ht_1.insert(std::make_pair(std::make_tuple(iu_o_w_id_3, iu_o_d_id_4, iu_o_id_8), std::make_tuple(iu_c_first_10, iu_c_last_11, iu_o_all_local_12)));}}}for(size_t tid = 0; tid < tables->orderline.col_ol_o_id.size(); tid++) {auto& iu_ol_o_id_9 = tables->orderline.col_ol_o_id[tid];auto& iu_ol_d_id_7 = tables->orderline.col_ol_d_id[tid];auto& iu_ol_w_id_6 = tables->orderline.col_ol_w_id[tid];auto& iu_ol_amount_13 = tables->orderline.col_ol_amount[tid];{auto range_iters = ht_1.equal_range(std::make_tuple(iu_ol_w_id_6, iu_ol_d_id_7, iu_ol_o_id_9));auto iter = range_iters.first;auto limit = range_iters.second;for(;iter != limit; iter++) {auto& iu_c_first_10 = std::get<0>(iter->second);auto& iu_c_last_11 = std::get<1>(iter->second);auto& iu_o_all_local_12 = std::get<2>(iter->second);std::cout  << iu_c_first_10 << "\t|\t" << iu_c_last_11 << "\t|\t" << iu_o_all_local_12 << "\t|\t" << iu_ol_amount_13<< std::endl;}}}}